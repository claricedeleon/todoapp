{"version":3,"sources":["images/delete.png","images/done.png","components/TaskRow.js","components/InputNewTask.js","components/TasksTable.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","dispatch","deleteTask","name","type","payload","moveToDone","status","className","onClick","src","Delete","alt","Done","state","tasks","addNewTask","newTaskName","useState","setNewTaskName","errorMessage","setErrorMessage","onChange","e","target","value","trim","taskDuplicate","map","task","pendingTasks","filter","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","newTask","reducer","tasksCopy","action","moveToDoneArray","find","filteredTasks","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b52294a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/delete.20fecaf8.png\";","export default __webpack_public_path__ + \"static/media/done.d33c874c.png\";","import './TaskRow.css';\r\nimport { connect } from 'react-redux';\r\nimport Delete from '../images/delete.png';\r\nimport Done from '../images/done.png';\r\n\r\n\r\nconst TaskRow = ({ name, status, deleteTask, moveToDone }) => {\r\n    return (\r\n        <tr>\r\n            <td className='taskNames'>\r\n                {name}\r\n                <span onClick={() => deleteTask(name)}>\r\n                    <img src={Delete}\r\n                        alt=\"Delete Task\"\r\n                        className=\"done\" /></span>\r\n                {status !== 'done' ? // doesn't work with ==='pending'\r\n                    <span onClick={() => moveToDone(name)}>\r\n                        <img src={Done}\r\n                            alt=\"Mark as DONE\"\r\n                            className=\"pending\" /></span> : null}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        deleteTask: (name) => dispatch({ type: 'DELETE_TASK', payload: name }),\r\n        moveToDone: (name) => dispatch({ type: 'MOVE_TO_DONE', payload: name })\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskRow)\r\n","import { connect } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport './InputNewTask.css';\r\n\r\nconst InputNewTask = ({ tasks, addNewTask }) => {\r\n\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const taskNameEventHandler = (e) => {\r\n        setNewTaskName(e.target.value);\r\n    }\r\n\r\n    const addTaskBtnEventHandler = () => {\r\n        if (newTaskName.trim() !== '') {\r\n            let taskDuplicate = false;\r\n\r\n            tasks.map(task => {\r\n                if (task.name === newTaskName) {\r\n                    taskDuplicate = true;\r\n                }\r\n            })\r\n            if (taskDuplicate) {\r\n                setErrorMessage('Task already exists.');\r\n                setNewTaskName('');\r\n            }\r\n            else {\r\n                let newTaskObj = {\r\n                    name: newTaskName,\r\n                    status: 'pending'\r\n                }\r\n                addNewTask(newTaskObj);\r\n                setNewTaskName('');\r\n                setErrorMessage('');\r\n            }\r\n        }\r\n        else {\r\n            setErrorMessage('Task name is required.')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-container\">\r\n            <h4>New Task</h4>\r\n            <input type=\"text\"\r\n                onChange={taskNameEventHandler}\r\n                value={newTaskName} />\r\n            <button onClick={addTaskBtnEventHandler}>Add</button>\r\n            <br />\r\n            <div className=\"error\">{errorMessage}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addNewTask: (newTaskName) => dispatch({ type: 'ADD_NEW_TASK', payload: newTaskName })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputNewTask);\r\n","import { connect } from 'react-redux';\r\nimport TaskRow from './TaskRow';\r\nimport './TasksTable.css';\r\nimport InputNewTask from './InputNewTask';\r\n\r\nconst TasksTable = ({ tasks }) => {\r\n    let pendingTasks = tasks.filter(task => task.status === 'pending')\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>To-Do App</h2>\r\n            <InputNewTask />\r\n            <h4>Pending Tasks</h4>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    {pendingTasks.length > 0 ? pendingTasks.map(task => (\r\n                        <TaskRow key={task.name} name={task.name} />)) : 'No Pending Tasks'}\r\n                </tbody>\r\n            </table>\r\n\r\n            <h4>Done Tasks</h4>\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    {\r\n                        tasks.filter(task => task.status === 'done').map(task => (\r\n                            <TaskRow key={task.name} name={task.name} status={task.status} />\r\n                        )\r\n                        )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TasksTable)\r\n","import './App.css';\r\nimport TasksTable from './components/TasksTable';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"contents\">\r\n      <TasksTable />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    tasks: [\r\n        { name: \"eat\", status: \"pending\" },\r\n        { name: \"code\", status: \"pending\" },\r\n        { name: \"sleep\", status: \"done\" }\r\n    ],\r\n    newTask: '',\r\n    errorMessage: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let tasksCopy;\r\n\r\n    switch (action.type) {\r\n        case 'ADD_NEW_TASK':\r\n            tasksCopy = [...state.tasks, action.payload];\r\n            return {\r\n                ...state,\r\n                tasks: tasksCopy\r\n            }\r\n        case 'MOVE_TO_DONE':\r\n            let moveToDoneArray = [...state.tasks]\r\n            moveToDoneArray.find(task => task.name === action.payload).status = 'done'\r\n            return {\r\n                ...state,\r\n                tasks: moveToDoneArray\r\n            }\r\n        case 'DELETE_TASK':\r\n            let filteredTasks = state.tasks.filter(task => task.name !== action.payload);\r\n            return {\r\n                ...state,\r\n                tasks: filteredTasks\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}